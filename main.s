;
; File generated by cc65 v 2.19 - Git 394d3b1
;
	.fopt		compiler,"cc65 v 2.19 - Git 394d3b1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.export		_temp0
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_tempShort0
	.export		_global_i
	.export		_global_j
	.export		_frameCount
	.export		_frameCountOverflow
	.export		_boardWidth
	.export		_rngState
	.export		_prevController
	.export		_controller
	.export		_gameMode
	.export		_cursorX
	.export		_cursorY
	.export		_numMinesSetInByte
	.export		_hardSelectionSprite
	.export		_boardIsMine
	.export		_boardIsActivated
	.export		_boardIsFlag
	.export		_bgPalette
	.export		_sprPalette
	.export		_updateRNGNoController
	.export		_getTileIsMineHard
	.export		_getTileIsMineEasy
	.export		_getTileIsActivatedHard
	.export		_getTileIsActivatedEasy
	.export		_getTileIsFlagHard
	.export		_getTileIsFlagEasy
	.export		_printNumber
	.export		_generateBoard
	.export		_hardUpdate
	.export		_update
	.export		_main

.segment	"DATA"

_numMinesSetInByte:
	.word	$0000

.segment	"RODATA"

_bgPalette:
	.byte	$09
	.byte	$1A
	.byte	$0F
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_sprPalette:
	.byte	$09
	.byte	$30
	.byte	$52
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_temp0:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_tempShort0:
	.res	1,$00
_global_i:
	.res	1,$00
_global_j:
	.res	1,$00
_frameCount:
	.res	1,$00
_frameCountOverflow:
	.res	1,$00
_boardWidth:
	.res	1,$00
_rngState:
	.res	2,$00
_prevController:
	.res	1,$00
_controller:
	.res	1,$00
_gameMode:
	.res	1,$00
_cursorX:
	.res	1,$00
_cursorY:
	.res	1,$00
.segment	"BSS"
_hardSelectionSprite:
	.res	4,$00
_boardIsMine:
	.res	104,$00
_boardIsActivated:
	.res	104,$00
_boardIsFlag:
	.res	104,$00

; ---------------------------------------------------------------
; void __near__ updateController (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateController: near

.segment	"CODE"

;
; prevController = controller;
;
	lda     _controller
	sta     _prevController
;
; controller = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _controller
;
; if((controller & PAD_LEFT) && (controller & PAD_RIGHT)) controller &= ~(0b11);
;
	and     #$02
	beq     L000D
	lda     _controller
	and     #$01
	beq     L000D
	lda     _controller
	and     #$FC
	sta     _controller
;
; if((controller & PAD_UP) && (controller & PAD_DOWN)) controller &= ~(0b1100);
;
L000D:	lda     _controller
	and     #$08
	beq     L000F
	lda     _controller
	and     #$04
	bne     L0010
L000F:	rts
L0010:	lda     _controller
	and     #$F3
	sta     _controller
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateRNG (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateRNG: near

.segment	"CODE"

;
; __asm__("lda %v", rngState);
;
	lda     _rngState
;
; __asm__("clc");
;
	clc
;
; __asm__("adc %v", controller);
;
	adc     _controller
;
; __asm__("sta %v", rngState);
;
	sta     _rngState
;
; rngState.longState ^= rngState.longState << 7;
;
	ldx     _rngState+1
	jsr     shlax7
	eor     _rngState
	pha
	txa
	eor     _rngState+1
	tax
	pla
	sta     _rngState
	stx     _rngState+1
;
; rngState.longState ^= rngState.longState >> 9;
;
	sta     ptr1
	stx     ptr1+1
	lda     _rngState+1
	lsr     a
	eor     ptr1
	ldx     ptr1+1
	sta     _rngState
	stx     _rngState+1
;
; rngState.longState ^= rngState.longState << 8;
;
	sta     ptr1
	stx     ptr1+1
	ldx     _rngState
	lda     ptr1
	sta     _rngState
	txa
	eor     ptr1+1
	sta     _rngState+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ updateRNGNoController (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateRNGNoController: near

.segment	"CODE"

;
; rngState.longState ^= rngState.longState << 7;
;
	lda     _rngState
	ldx     _rngState+1
	jsr     shlax7
	eor     _rngState
	pha
	txa
	eor     _rngState+1
	tax
	pla
	sta     _rngState
	stx     _rngState+1
;
; rngState.longState ^= rngState.longState >> 9;
;
	sta     ptr1
	stx     ptr1+1
	lda     _rngState+1
	lsr     a
	eor     ptr1
	ldx     ptr1+1
	sta     _rngState
	stx     _rngState+1
;
; rngState.longState ^= rngState.longState << 8;
;
	sta     ptr1
	stx     ptr1+1
	ldx     _rngState
	lda     ptr1
	sta     _rngState
	txa
	eor     ptr1+1
	sta     _rngState+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsMineHard (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsMineHard: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsMineHard(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 5) + x); //bit offset
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsMine[tempShort0 / 8] >> (tempShort0 % 8)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsMine)
	sta     ptr1+1
	ldy     #<(_boardIsMine)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsMineEasy (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsMineEasy: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsMineEasy(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 4) + x);
;
	ldy     #$00
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsMine[tempShort0 >> 3] >> (tempShort0 & 0b111)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsMine)
	sta     ptr1+1
	ldy     #<(_boardIsMine)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsActivatedHard (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsActivatedHard: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsActivatedHard(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 5) + x);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsActivated[tempShort0 >> 3] >> (tempShort0 & 0b111)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsActivated)
	sta     ptr1+1
	ldy     #<(_boardIsActivated)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsActivatedEasy (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsActivatedEasy: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsActivatedEasy(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 4) + x);
;
	ldy     #$00
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsActivated[tempShort0 >> 3] >> (tempShort0 & 0b111)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsActivated)
	sta     ptr1+1
	ldy     #<(_boardIsActivated)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsFlagHard (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsFlagHard: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsFlagHard(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 5) + x); //bit offset
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsFlag[tempShort0 / 8] >> (tempShort0 % 8)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsFlag)
	sta     ptr1+1
	ldy     #<(_boardIsFlag)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getTileIsFlagEasy (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getTileIsFlagEasy: near

.segment	"CODE"

;
; uchar __fastcall__ getTileIsFlagEasy(uchar x, uchar y) {
;
	jsr     pusha
;
; tempShort0 = ((y << 4) + x);
;
	ldy     #$00
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	sta     _tempShort0
;
; return (boardIsFlag[tempShort0 >> 3] >> (tempShort0 & 0b111)) & 0b1;
;
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	clc
	lda     #>(_boardIsFlag)
	sta     ptr1+1
	ldy     #<(_boardIsFlag)
	lda     (ptr1),y
	sta     ptr1
	lda     _tempShort0
	and     #$07
	tay
	lda     ptr1
L0003:	lsr     a
	dey
	bpl     L0003
	rol     a
	and     #$01
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ printNumber (unsigned short number, unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printNumber: near

.segment	"CODE"

;
; void printNumber(unsigned short number, uchar x, uchar y) {
;
	jsr     pusha
;
; uchar output = 0;
;
	lda     #$00
	jsr     pusha
;
; uchar numberOffset = 0;
;
	jsr     pusha
;
; uchar firstNumber = FALSE;
;
	jsr     pusha
;
; while(number >= 10000) {
;
	jmp     L0004
;
; number -= 10000;
;
L0002:	ldx     #$27
	lda     #$10
	ldy     #$05
	jsr     subeqysp
;
; ++output;
;
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; while(number >= 10000) {
;
L0004:	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$10
	txa
	sbc     #$27
	bcs     L0002
;
; one_vram_buffer(output + NUMBER_TO_TILE, NTADR_A(x, y));
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; firstNumber = TRUE;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++numberOffset;
;
	iny
	clc
	adc     (sp),y
	sta     (sp),y
;
; output = 0;
;
	lda     #$00
	iny
;
; while(number >= 1000) {
;
	jmp     L0017
;
; number -= 1000;
;
L0006:	ldx     #$03
	lda     #$E8
	ldy     #$05
	jsr     subeqysp
;
; ++output;
;
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
L0017:	sta     (sp),y
;
; while(number >= 1000) {
;
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$E8
	txa
	sbc     #$03
	bcs     L0006
;
; one_vram_buffer(output + NUMBER_TO_TILE, NTADR_A(x + 1, y));
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; firstNumber = TRUE;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++numberOffset;
;
	iny
	clc
	adc     (sp),y
	sta     (sp),y
;
; output = 0;
;
	lda     #$00
	iny
;
; while(number >= 100) {
;
	jmp     L0018
;
; number -= 100;
;
L001A:	lda     #$64
	ldy     #$05
	jsr     subeqysp
;
; ++output;
;
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
L0018:	sta     (sp),y
;
; while(number >= 100) {
;
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$64
	txa
	sbc     #$00
	ldx     #$00
	bcs     L001A
;
; one_vram_buffer(output + NUMBER_TO_TILE, NTADR_A(x + 2, y));
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$02
	bcc     L000F
	inx
L000F:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; firstNumber = TRUE;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++numberOffset;
;
	iny
	clc
	adc     (sp),y
	sta     (sp),y
;
; output = 0;
;
	lda     #$00
	iny
;
; while(number >= 10) {
;
	jmp     L0019
;
; number -= 10;
;
L001B:	lda     #$0A
	ldy     #$05
	jsr     subeqysp
;
; ++output;
;
	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
L0019:	sta     (sp),y
;
; while(number >= 10) {
;
	ldy     #$06
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0A
	txa
	sbc     #$00
	ldx     #$00
	bcs     L001B
;
; one_vram_buffer(output + NUMBER_TO_TILE, NTADR_A(x + 3, y));
;
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$03
	bcc     L0014
	inx
L0014:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; firstNumber = TRUE;
;
	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; ++numberOffset;
;
	iny
	clc
	adc     (sp),y
	sta     (sp),y
;
; output = 0;
;
	lda     #$00
	iny
	sta     (sp),y
;
; one_vram_buffer(number + NUMBER_TO_TILE, NTADR_A(x + 4, y));
;
	ldy     #$05
	lda     (sp),y
	clc
	adc     #$30
	jsr     pusha
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	ldx     #$00
	iny
	lda     (sp),y
	clc
	adc     #$04
	bcc     L0016
	inx
L0016:	ora     ptr1
	pha
	txa
	ora     tmp1
	tax
	pla
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ generateBoard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_generateBoard: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     decsp2
	jsr     _ppu_off
;
; if((gameMode >> 3) & 0b1) { //is the game in hard mode?
;
	lda     _gameMode
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	beq     L0012
;
; temp0 = HARD_NUM_MINES; //250 mines
;
	lda     #$FA
	sta     _temp0
;
; boardWidth = HARD_MAX_X;
;
	lda     #$20
	sta     _boardWidth
;
; temp1 = HARD_MAX_Y;
;
	lda     #$1A
	sta     _temp1
;
; temp2 = BOARD_MEM_SIZE;
;
	lda     #$68
	sta     _temp2
;
; numSpacesLeft = HARD_MAX_X * HARD_MAX_Y;
;
	ldy     #$00
	lda     #$40
	sta     (sp),y
	lda     #$03
;
; } else {
;
	jmp     L0015
;
; temp0 = EASY_NUM_MINES; //85 mines
;
L0012:	lda     #$46
	sta     _temp0
;
; boardWidth = EASY_MAX_X;
;
	lda     #$10
	sta     _boardWidth
;
; temp1 = EASY_MAX_Y;
;
	lda     #$0D
	sta     _temp1
;
; temp2 = EASY_BOARD_USED_MEM_SIZE;
;
	lda     #$1A
	sta     _temp2
;
; numSpacesLeft = EASY_MAX_X * EASY_MAX_Y;
;
	ldy     #$00
	lda     #$D0
	sta     (sp),y
	tya
L0015:	iny
	sta     (sp),y
;
; for(global_i = 0; global_i < temp2; global_i++) {
;
	lda     #$00
	sta     _global_i
L0013:	lda     _global_i
	cmp     _temp2
	bcs     L0005
;
; temp3 = 0; //clear the board
;
	lda     #$00
	sta     _temp3
;
; for(global_j = 0; global_j < 8; global_j++) { //8 bits per byte
;
	sta     _global_j
L0014:	lda     _global_j
	cmp     #$08
	bcs     L0009
;
; updateRNGNoController();
;
	jsr     _updateRNGNoController
;
; temp3 = temp3 << 1;
;
	lda     _temp3
	asl     a
	sta     _temp3
;
; if((rngState.longState % numSpacesLeft) < temp0) { //if randomness says to, add a mine
;
	lda     _rngState
	ldx     _rngState+1
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosumodax
	cmp     _temp0
	txa
	sbc     #$00
	bcs     L000C
;
; --temp0; //remove 1 flag from the flags counter
;
	dec     _temp0
;
; temp3 |= 0b1; //add a mine to the lsb of the byte
;
	lda     _temp3
	ora     #$01
	sta     _temp3
;
; ++numMinesSetInByte;
;
	inc     _numMinesSetInByte
	bne     L000C
	inc     _numMinesSetInByte+1
;
; --numSpacesLeft;
;
L000C:	ldx     #$00
	lda     #$01
	jsr     subeq0sp
;
; for(global_j = 0; global_j < 8; global_j++) { //8 bits per byte
;
	inc     _global_j
	jmp     L0014
;
; boardIsMine[global_i] = temp3;
;
L0009:	ldy     _global_i
	lda     _temp3
	sta     _boardIsMine,y
;
; boardIsActivated[global_i] = 0;
;
	ldy     _global_i
	lda     #$00
	sta     _boardIsActivated,y
;
; boardIsFlag[global_i] = 0;
;
	ldy     _global_i
	sta     _boardIsFlag,y
;
; for(global_i = 0; global_i < temp2; global_i++) {
;
	inc     _global_i
	jmp     L0013
;
; ppu_on_all();
;
L0005:	jsr     _ppu_on_all
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ hardUpdate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hardUpdate: near

.segment	"CODE"

;
; if(BUTTON_DOWN(PAD_RIGHT)) {
;
	lda     _controller
	and     #$01
	beq     L001C
	lda     _prevController
	and     #$01
	bne     L001C
;
; __asm__("ldx %v", cursorX);
;
	ldx     _cursorX
;
; __asm__("inx");
;
	inx
;
; __asm__("cpx #%b", HARD_MAX_X);
;
	cpx     #$20
;
; __asm__("bne @padRightSkip");
;
	bne     @padRightSkip
;
; __asm__("ldx #$00");
;
	tax
;
; __asm__("stx %v", cursorX);
;
@padRightSkip:
	stx     _cursorX
;
; if(BUTTON_DOWN(PAD_LEFT)) {
;
L001C:	lda     _controller
	and     #$02
	beq     L0020
	lda     _prevController
	and     #$02
	bne     L0020
;
; __asm__("ldx %v", cursorX);
;
	ldx     _cursorX
;
; __asm__("dex");
;
	dex
;
; __asm__("bpl @padLeftSkip");
;
	bpl     @padLeftSkip
;
; __asm__("ldx #%b", HARD_MAX_X - 1);
;
	ldx     #$1F
;
; __asm__("stx %v", cursorX);
;
@padLeftSkip:
	stx     _cursorX
;
; if(BUTTON_DOWN(PAD_DOWN)) {
;
L0020:	lda     _controller
	and     #$04
	beq     L0024
	lda     _prevController
	and     #$04
	bne     L0024
;
; __asm__("ldx %v", cursorY);
;
	ldx     _cursorY
;
; __asm__("inx");
;
	inx
;
; __asm__("cpx #%b", HARD_MAX_Y);
;
	cpx     #$1A
;
; __asm__("bne @padDownSkip");
;
	bne     @padDownSkip
;
; __asm__("ldx #00");
;
	tax
;
; __asm__("stx %v", cursorY);
;
@padDownSkip:
	stx     _cursorY
;
; if(BUTTON_DOWN(PAD_UP)) {
;
L0024:	lda     _controller
	and     #$08
	beq     L0028
	lda     _prevController
	and     #$08
	bne     L0028
;
; __asm__("ldx %v", cursorY);
;
	ldx     _cursorY
;
; __asm__("dex");
;
	dex
;
; __asm__("bpl @padUpSkip");
;
	bpl     @padUpSkip
;
; __asm__("ldx #%b", HARD_MAX_Y - 1);
;
	ldx     #$19
;
; __asm__("stx %v", cursorY);
;
@padUpSkip:
	stx     _cursorY
;
; hardSelectionSprite.xPos = cursorX << 3; //x8 to align w/ tiles
;
L0028:	lda     _cursorX
	asl     a
	asl     a
	asl     a
	sta     _hardSelectionSprite+3
;
; hardSelectionSprite.yPos = (cursorY << 3) + 23; //1 less to be 1 higher (properly aligned)
;
	lda     _cursorY
	asl     a
	asl     a
	asl     a
	clc
	adc     #$17
	sta     _hardSelectionSprite
;
; printNumber(cursorX, 1, 1);
;
	jsr     decsp3
	lda     _cursorX
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	jsr     _printNumber
;
; printNumber(cursorY, 8, 1);
;
	jsr     decsp3
	lda     _cursorY
	ldy     #$01
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$08
	ldy     #$00
	sta     (sp),y
	lda     #$01
	jsr     _printNumber
;
; if((frameCount & 0b11111) == 0) {
;
	lda     _frameCount
	and     #$1F
	bne     L0017
;
; if((frameCount & 0b111111) == 0) one_vram_buffer(WHITE, PALETTE_MEMORY_BEGIN + 0x11);
;
	lda     _frameCount
	and     #$3F
	bne     L0029
	lda     #$30
;
; else one_vram_buffer(0x38, PALETTE_MEMORY_BEGIN + 0x11);
;
	jmp     L002C
L0029:	lda     #$38
L002C:	jsr     pusha
	ldx     #$3F
	lda     #$11
	jsr     _one_vram_buffer
;
; oam_clear();
;
L0017:	jsr     _oam_clear
;
; oam_spr(hardSelectionSprite.xPos, hardSelectionSprite.yPos, hardSelectionSprite.tile, hardSelectionSprite.attributes);
;
	jsr     decsp3
	lda     _hardSelectionSprite+3
	ldy     #$02
	sta     (sp),y
	lda     _hardSelectionSprite
	dey
	sta     (sp),y
	lda     _hardSelectionSprite+1
	dey
	sta     (sp),y
	lda     _hardSelectionSprite+2
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ initState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initState: near

.segment	"CODE"

;
; prevController = 0;
;
	lda     #$00
	sta     _prevController
;
; controller = 0;
;
	sta     _controller
;
; rngState.byte1 = 0xC2;
;
	lda     #$C2
	sta     _rngState
;
; rngState.byte2 = 0xE3;
;
	lda     #$E3
	sta     _rngState+1
;
; frameCount = 0;
;
	lda     #$00
	sta     _frameCount
;
; hardSelectionSprite.tile = 0x00;
;
	sta     _hardSelectionSprite+1
;
; hardSelectionSprite.attributes = 0b00000000;
;
	sta     _hardSelectionSprite+2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update: near

.segment	"CODE"

;
; updateController();
;
	jsr     _updateController
;
; updateRNG();
;
	jsr     _updateRNG
;
; hardUpdate();
;
	jsr     _hardUpdate
;
; __asm__("inc %v", frameCount);
;
	inc     _frameCount
;
; __asm__("bne @frameCountNoOverflow");
;
	bne     @frameCountNoOverflow
;
; frameCountOverflow = TRUE;
;
	lda     #$01
;
; return;
;
	jmp     L0002
;
; frameCountOverflow = FALSE;
;
@frameCountNoOverflow:
	lda     #$00
L0002:	sta     _frameCountOverflow
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; initState();
;
	jsr     _initState
;
; gameMode |= (0b1 << 3);
;
	lda     _gameMode
	ora     #$08
	sta     _gameMode
;
; generateBoard();
;
	jsr     _generateBoard
;
; ppu_off(); //screen off
;
	jsr     _ppu_off
;
; pal_bg(bgPalette);
;
	lda     #<(_bgPalette)
	ldx     #>(_bgPalette)
	jsr     _pal_bg
;
; pal_spr(sprPalette);
;
	lda     #<(_sprPalette)
	ldx     #>(_sprPalette)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; temp0 = 0;
;
	lda     #$00
	sta     _temp0
;
; temp1 = 0;
;
	sta     _temp1
;
; temp3 = 0;
;
	sta     _temp3
;
; global_j = 0;
;
	sta     _global_j
;
; global_i = 0;
;
	sta     _global_i
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; temp0 = 0;
;
	lda     #$00
	sta     _temp0
;
; for(; global_j < HARD_MAX_Y; ++global_j) {
;
L0011:	lda     _global_j
	cmp     #$1A
	bcs     L0004
;
; for(; global_i < HARD_MAX_X; ++global_i) {
;
L0012:	lda     _global_i
	cmp     #$20
	bcs     L0013
;
; temp2 = 0x8 + (((global_i & 0b1) ^ (global_j & 0b1)) << 1); //offset
;
	and     #$01
	jsr     pusha0
	lda     _global_j
	and     #$01
	jsr     tosxora0
	asl     a
	clc
	adc     #$08
	sta     _temp2
;
; temp2 += getTileIsMineHard(global_i, global_j); //1 = mine, 0 = no mine
;
	lda     _global_i
	jsr     pusha
	lda     _global_j
	jsr     _getTileIsMineHard
	clc
	adc     _temp2
	sta     _temp2
;
; one_vram_buffer(temp2, NTADR_A(global_i, global_j + 3));
;
	jsr     pusha
	ldx     #$00
	lda     _global_j
	clc
	adc     #$03
	bcc     L000C
	inx
L000C:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     _global_i
	ora     ptr1
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; ++temp0;
;
	inc     _temp0
;
; if(temp0 > 25) goto here; //only 25 updates per frame
;
	lda     _temp0
	cmp     #$1A
	bcs     L0002
;
; for(; global_i < HARD_MAX_X; ++global_i) {
;
	inc     _global_i
	jmp     L0012
;
; global_i = 0;
;
L0013:	lda     #$00
	sta     _global_i
;
; for(; global_j < HARD_MAX_Y; ++global_j) {
;
	inc     _global_j
	jmp     L0011
;
; ppu_wait_nmi();
;
L0004:	jsr     _ppu_wait_nmi
;
; ppu_wait_nmi();
;
L000E:	jsr     _ppu_wait_nmi
;
; update();
;
	jsr     _update
;
; while(TRUE) {
;
	jmp     L000E

.endproc

